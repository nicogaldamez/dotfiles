set guioptions-=T

let g:NERDTreeWinPos = "right"
set guioptions-=T " Removes top toolbar
set guioptions-=r " Removes right hand scroll bar
set go-=L " Removes left hand scroll bar
autocmd User Rails let b:surround_{char2nr('-')} = "<% \r %>" " displays <% %> correctly

set wildmenu

set mouse=a

"au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi statusline guibg=green

" default the statusline to green when entering Vim
hi statusline guibg=green

" strip trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

if has("gui_macvim") && has("gui_running")
   " Command-Shift-F on OSX
   nmap <D-S-F> :Ack<space>
endif

nnoremap <silent> <leader>T :ClearCtrlPCache<cr>\|:CtrlP<cr>

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

set relativenumber

" ========================================================================
" " Ruby stuff
" " ========================================================================

"syntax on                 " Enable syntax highlighting

" set tags=./tags;

augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
  autocmd FileType ruby,eruby,yaml setlocal path+=lib
  autocmd FileType ruby,eruby,yaml setlocal colorcolumn=80
  " Make ?s part of words
  autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?
augroup END

" =================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ","

inoremap jk <esc>
inoremap jj <esc>
inoremap kk <esc>
inoremap kj <esc>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

map <Leader>ac :sp app/controllers/application_controller.rb<cr>
map <Leader>bb :!bundle install<cr>
map <Leader>gl :e Gemfile.lock<cr>
map <Leader>sc :sp db/schema.rb<cr>

" shortcut to save
nmap <leader>, :w<cr>

" shortcut to quit
nmap <leader>q :q<cr>

" edit ~/.vimrc
map <leader>ev :e! ~/.vimrc<cr>
" " edit vim plugins
map <leader>evp :e! ~/.vim/plugins.vim<cr>

" Textmate style indentation
vmap <leader>[ <gv
vmap <leader>] >gv
nmap <leader>[ <<
nmap <leader>] >>

" Paste mode
vmap <leader>p :set paste
vmap <leader>np :set nopaste

map <silent> <C-h> :call WinMove('h')<cr>
map <silent> <C-j> :call WinMove('j')<cr>
map <silent> <C-k> :call WinMove('k')<cr>
map <silent> <C-l> :call WinMove('l')<cr>


map <silent> <Leader>r :VroomRunTestFile<cr>
map <silent> <Leader>R :VroomRunNearestTest<cr>
map <silent> <Leader>l :VroomRunLastTest<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
set history=500 " keep 500 lines of command line history
set ruler " show the cursor position all the time


" Window movement shortcuts
" " move to the window in the direction shown, or create a new window
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr())
    if (match(a:key,'[jk]'))
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE (thanks Gary Bernhardt)
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
      exec ':saveas ' . new_name
      exec ':silent !rm ' . old_name
      redraw!
    endif
endfunction
map <Leader>m :call RenameFile()<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree closed by default
let g:NERDTreeHijackNetrw=0
" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=1
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" Toggle NERDTree
nmap <silent> <leader>k :NERDTreeToggle<cr>
" " expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>
